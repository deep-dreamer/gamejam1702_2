// Generated by Haxe 3.4.0
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Entity = function(x,y) {
	this.x = x;
	this.y = y;
	this.count = 0;
};
Entity.__name__ = true;
Entity.prototype = {
	update: function() {
	}
	,draw: function(g) {
	}
	,__class__: Entity
};
var oimo_js_engine_OMain = function(canvas) {
	this.canvas = canvas;
	this.input = new oimo_js_engine_OInput();
	this.__imageLoader = new oimo_js_engine_OImageLoader();
	this.__imageMap = new haxe_ds_StringMap();
	this.__setup();
};
oimo_js_engine_OMain.__name__ = true;
oimo_js_engine_OMain.prototype = {
	__setup: function() {
		var _gthis = this;
		this.__state = 0;
		this.frameCount = 0;
		this.setup();
		if(this.__state != 1) {
			throw new js__$Boot_HaxeError("call init()");
		}
		this.__state = 2;
		var _gthis1 = this;
		if(this.__state != 2) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var touchCount = 0;
		var firstTouchId = -1;
		var scalingRatio = window.devicePixelRatio / this.__bufferScalingRatio;
		var elementX = function() {
			return _gthis1.canvas.getBoundingClientRect().left;
		};
		var elementY = function() {
			return _gthis1.canvas.getBoundingClientRect().top;
		};
		var body = window.document.body;
		body.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			if(firstTouchId == -1) {
				firstTouchId = e.changedTouches[0].identifier;
			}
			var _g1 = 0;
			var _g = e.changedTouches.length;
			while(_g1 < _g) {
				var touch = e.changedTouches[_g1++];
				if(touch.identifier == firstTouchId) {
					var tmp = touch.clientX - elementX();
					_gthis1.input._ntouchX = tmp * scalingRatio;
					var tmp1 = touch.clientY - elementY();
					_gthis1.input._ntouchY = tmp1 * scalingRatio;
					_gthis1.input._ntouch = true;
				}
			}
			touchCount += e.changedTouches.length;
		});
		body.addEventListener("touchmove",function(e1) {
			if(e1.cancelable) {
				e1.preventDefault();
			}
			var _g11 = 0;
			var _g2 = e1.touches.length;
			while(_g11 < _g2) {
				var touch1 = e1.touches[_g11++];
				if(touch1.identifier == firstTouchId) {
					var tmp2 = touch1.clientX - elementX();
					_gthis1.input._ntouchX = tmp2 * scalingRatio;
					var tmp3 = touch1.clientY - elementY();
					_gthis1.input._ntouchY = tmp3 * scalingRatio;
				}
			}
		});
		var touchend = function(e2) {
			if(e2.cancelable) {
				e2.preventDefault();
			}
			var _g12 = 0;
			var _g3 = e2.changedTouches.length;
			while(_g12 < _g3) {
				var touch2 = e2.changedTouches[_g12++];
				if(touch2.identifier == firstTouchId) {
					firstTouchId = -1;
					var touchend1 = touch2.clientX - elementX();
					_gthis1.input._ntouchX = touchend1 * scalingRatio;
					var touchend2 = touch2.clientY - elementY();
					_gthis1.input._ntouchY = touchend2 * scalingRatio;
					_gthis1.input._ntouch = false;
				}
			}
			touchCount -= e2.changedTouches.length;
		};
		body.addEventListener("touchend",touchend);
		body.addEventListener("touchcancel",touchend);
		body.addEventListener("mousedown",function(e3) {
			if(e3.cancelable) {
				e3.preventDefault();
			}
			switch(e3.button) {
			case 0:
				_gthis1.input._nmouseL = true;
				break;
			case 2:
				_gthis1.input._nmouseR = true;
				break;
			}
			var tmp4 = e3.clientX - elementX();
			_gthis1.input._nmouseX = tmp4 * scalingRatio;
			var tmp5 = e3.clientY - elementY();
			_gthis1.input._nmouseY = tmp5 * scalingRatio;
		});
		body.addEventListener("mouseup",function(e4) {
			if(e4.cancelable) {
				e4.preventDefault();
			}
			switch(e4.button) {
			case 0:
				_gthis1.input._nmouseL = false;
				break;
			case 2:
				_gthis1.input._nmouseR = false;
				break;
			}
			var tmp6 = e4.clientX - elementX();
			_gthis1.input._nmouseX = tmp6 * scalingRatio;
			var tmp7 = e4.clientY - elementY();
			_gthis1.input._nmouseY = tmp7 * scalingRatio;
		});
		body.addEventListener("mousemove",function(e5) {
			if(e5.cancelable) {
				e5.preventDefault();
			}
			var tmp8 = e5.clientX - elementX();
			_gthis1.input._nmouseX = tmp8 * scalingRatio;
			var tmp9 = e5.clientY - elementY();
			_gthis1.input._nmouseY = tmp9 * scalingRatio;
		});
		body.oncontextmenu = function(e6) {
			return false;
		};
		this.__imageLoader.waitForAll(function() {
			_gthis.__state = 3;
			_gthis.onLoad();
			_gthis.__state = 4;
			var _this = _gthis.__timer;
			_this.running = true;
			_this.expectedNextTime = new Date().getTime();
			_this.loop();
		});
	}
	,setup: function() {
		throw new js__$Boot_HaxeError("override this");
	}
	,__loop: function() {
		if(this.__state != 4) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		this.frameCount++;
		this.input._update();
		this.loop();
		this.__screenGraphics.image(this.buffer,0,0,this.__width,this.__height,0,0,this.__screenWidth,this.__screenHeight);
	}
	,loop: function() {
		throw new js__$Boot_HaxeError("override this");
	}
	,onLoad: function() {
	}
	,__class__: oimo_js_engine_OMain
};
var GameJam1702_$2 = function(canvas) {
	oimo_js_engine_OMain.call(this,canvas);
};
GameJam1702_$2.__name__ = true;
GameJam1702_$2.main = function() {
	new GameJam1702_$2(window.document.getElementById("canvas"));
};
GameJam1702_$2.__super__ = oimo_js_engine_OMain;
GameJam1702_$2.prototype = $extend(oimo_js_engine_OMain.prototype,{
	setup: function() {
		GameJam1702_$2.o = this;
		var ua = window.navigator.userAgent;
		if(ua.indexOf("iPad") == -1 && (ua.indexOf("iPhone") != -1 || ua.indexOf("Android") != -1)) {
			var meta = window.document.createElement("meta");
			meta.setAttribute("name","viewport");
			meta.setAttribute("content","width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no");
			window.document.head.appendChild(meta);
			window.document.body.style.margin = "0";
		}
		var a = window.innerWidth / 128;
		var b = window.innerHeight / 128;
		if(this.__state != 0) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		this.__state = 1;
		var pixelRatio = window.devicePixelRatio;
		this.__bufferScalingRatio = (a < b?a:b) * window.devicePixelRatio | 0;
		this.__width = 128;
		this.__height = 128;
		this.buffer = new oimo_js_graphics_OImage(this.__width,this.__height,oimo_js_engine_OGraphicsMode.Canvas2D);
		this.gl = this.buffer.gl;
		this.c2d = this.buffer.c2d;
		this.__screenWidth = this.__width * this.__bufferScalingRatio;
		this.__screenHeight = this.__height * this.__bufferScalingRatio;
		this.canvas.style.width = this.__screenWidth / pixelRatio + "px";
		this.canvas.style.height = this.__screenHeight / pixelRatio + "px";
		this.canvas.width = this.__screenWidth;
		this.canvas.height = this.__screenHeight;
		this.__screenGraphics = new oimo_js_graphics_OGraphics2D(this.canvas.getContext("2d",null));
		this.__timer = new oimo_js_engine_OTimer(50,$bind(this,this.__loop));
		this.g = new oimo_js_graphics_OGraphics2D(this.c2d);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image = new Image();
		image.src = "tile.gif";
		this.__imageMap.set("tile.gif",image);
		this.__imageLoader.add(image);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image1 = new Image();
		image1.src = "title.gif";
		this.__imageMap.set("title.gif",image1);
		this.__imageLoader.add(image1);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image2 = new Image();
		image2.src = "pl.gif";
		this.__imageMap.set("pl.gif",image2);
		this.__imageLoader.add(image2);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image3 = new Image();
		image3.src = "craft.gif";
		this.__imageMap.set("craft.gif",image3);
		this.__imageLoader.add(image3);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image4 = new Image();
		image4.src = "craftw.gif";
		this.__imageMap.set("craftw.gif",image4);
		this.__imageLoader.add(image4);
		if(this.__state != 0 && this.__state != 1) {
			throw new js__$Boot_HaxeError("invalid call");
		}
		var image5 = new Image();
		image5.src = "gameover.gif";
		this.__imageMap.set("gameover.gif",image5);
		this.__imageLoader.add(image5);
		this.initGame();
	}
	,onLoad: function() {
		var image = this.__imageMap.get("tile.gif");
		var w = image.width;
		var h = image.height;
		var res = new oimo_js_graphics_OImage(w,h,oimo_js_engine_OGraphicsMode.Canvas2D);
		res.c2d.drawImage(image,0,0,w,h,0,0,w,h);
		this.tileImg = res;
		var image1 = this.__imageMap.get("title.gif");
		var w1 = image1.width;
		var h1 = image1.height;
		var res1 = new oimo_js_graphics_OImage(w1,h1,oimo_js_engine_OGraphicsMode.Canvas2D);
		res1.c2d.drawImage(image1,0,0,w1,h1,0,0,w1,h1);
		this.titleImg = res1;
		var image2 = this.__imageMap.get("pl.gif");
		var w2 = image2.width;
		var h2 = image2.height;
		var res2 = new oimo_js_graphics_OImage(w2,h2,oimo_js_engine_OGraphicsMode.Canvas2D);
		res2.c2d.drawImage(image2,0,0,w2,h2,0,0,w2,h2);
		this.plImg = res2;
		var image3 = this.__imageMap.get("craft.gif");
		var w3 = image3.width;
		var h3 = image3.height;
		var res3 = new oimo_js_graphics_OImage(w3,h3,oimo_js_engine_OGraphicsMode.Canvas2D);
		res3.c2d.drawImage(image3,0,0,w3,h3,0,0,w3,h3);
		this.craftImg = res3;
		var image4 = this.__imageMap.get("craftw.gif");
		var w4 = image4.width;
		var h4 = image4.height;
		var res4 = new oimo_js_graphics_OImage(w4,h4,oimo_js_engine_OGraphicsMode.Canvas2D);
		res4.c2d.drawImage(image4,0,0,w4,h4,0,0,w4,h4);
		this.craftWImg = res4;
		var image5 = this.__imageMap.get("gameover.gif");
		var w5 = image5.width;
		var h5 = image5.height;
		var res5 = new oimo_js_graphics_OImage(w5,h5,oimo_js_engine_OGraphicsMode.Canvas2D);
		res5.c2d.drawImage(image5,0,0,w5,h5,0,0,w5,h5);
		this.gameoverImg = res5;
	}
	,initGame: function() {
		this.count = 0;
		this.mode = 0;
		this.titleCount = 0;
		this.woods = 0;
		this.cros = 0;
		this.garb = 0;
		this.life = 10;
		this.night = false;
		this.w = new World(16,16);
		this.pl = new Player(8,8);
		this.w.addEntity(this.pl);
	}
	,randIn: function(a,b) {
		return a + Math.random() * (b - a);
	}
	,loop: function() {
		this.update();
		this.draw();
	}
	,update: function() {
		this.count++;
		switch(this.mode) {
		case 0:
			this.titleCount++;
			if(this.input.dtouch + this.input.dmouseL == 1) {
				if(this.titleCount > 100) {
					this.gotoMain();
				} else {
					this.titleCount = 100;
				}
			}
			break;
		case 1:
			this.mainCount++;
			if(this.mainCount > 9000) {
				this.night = true;
			}
			if(this.w.getBlockAt(this.pl.x,this.pl.y) == 2) {
				this.pl.y = 10000;
			}
			if(this.pl.y > 100) {
				this.pl.y += 100;
			}
			if(this.pl.y > 15000) {
				this.gotoGameOver();
			}
			this.control();
			this.w.update();
			break;
		case 2:
			this.controlCraft();
			break;
		case 3:
			this.gameoverCount++;
			if(this.input.dmouseL + this.input.dtouch == 1 && this.gameoverCount > 50) {
				var txt = this.cros > 0?"クロスを" + this.cros + "個作って":this.garb > 0?"ゴミを" + this.garb + "個生成して":"何もできないまま";
				if(this.pl.y > 100) {
					txt += "溺れて死んだ。 ";
				} else {
					txt += "ゾンビに殺された。 ";
				}
				var s = txt + window.location.href + " #crosscraft";
				var tmp = encodeURIComponent(s);
				window.location.href = "https://twitter.com/intent/tweet?text=" + tmp;
			}
			break;
		}
	}
	,control: function() {
		var mx = this.input.touchX + this.input.mouseX;
		var my = this.input.touchY + this.input.mouseY;
		var dprs = this.input.dtouch + this.input.dmouseL;
		if(this.input.mouseL || this.input.touch) {
			var dx = mx / 8 - this.pl.x;
			var dy = my / 8 - this.pl.y;
			var l = 1 / Math.sqrt(dx * dx + dy * dy + 1e-6);
			this.pl.x += dx * l * 0.07;
			this.pl.y += dy * l * 0.07;
			this.pl.dir = (dx > 0?dx:-dx) > (dy > 0?dy:-dy)?1:0;
			this.pl.walkCount++;
			var _g = 0;
			var _g1 = this.w.es;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(js_Boot.__instanceof(e,Wood)) {
					var ew = js_Boot.__cast(e , Wood);
					var dst = this.distE(this.pl,ew);
					if(dst < 0.8) {
						dx = ew.x - this.pl.x;
						dy = ew.y - this.pl.y;
						l = (0.8 - dst) / Math.sqrt(dx * dx + dy * dy + 1e-6);
						dx *= l;
						dy *= l;
						this.pl.x -= dx;
						this.pl.y -= dy;
					}
				}
				if(js_Boot.__instanceof(e,Zombie)) {
					var ez = js_Boot.__cast(e , Zombie);
					var dst1 = this.distE(this.pl,ez);
					if(dst1 < 0.8) {
						dx = ez.x - this.pl.x;
						dy = ez.y - this.pl.y;
						l = (1.6 - dst1) / Math.sqrt(dx * dx + dy * dy + 1e-6);
						dx *= l;
						dy *= l;
						this.pl.x -= dx;
						this.pl.y -= dy;
						this.life--;
						if(this.life == 0) {
							this.gotoGameOver();
						}
					}
				}
			}
		} else {
			this.pl.walkCount = 0;
		}
		if(dprs == 1) {
			var _g2 = 0;
			var _g11 = this.w.es;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				if(js_Boot.__instanceof(e1,Wood)) {
					var ew1 = js_Boot.__cast(e1 , Wood);
					if(this.distE(this.pl,ew1) < 0.8 && this.dist(ew1.x,ew1.y,mx / 8,my / 8) < 1.5) {
						ew1.hit();
					}
				}
			}
			console.log(this.w.getBlockAt(this.pl.x,this.pl.y));
			if(this.w.getBlockAt(this.pl.x,this.pl.y) == 3 && this.dist(this.pl.x,this.pl.y,mx / 8,my / 8) < 1.5 && !this.night) {
				this.gotoCraft();
			}
		}
	}
	,gotoGameOver: function() {
		this.gameoverCount = 0;
		this.mode = 3;
	}
	,gotoCraft: function() {
		this.mode = 2;
		this.craftGrid = [[0,0,0],[0,0,0],[0,0,0]];
	}
	,controlCraft: function() {
		var mx = this.input.touchX + this.input.mouseX;
		var my = this.input.touchY + this.input.mouseY;
		if(this.input.dtouch + this.input.dmouseL == 1) {
			var co = 0;
			var _g = 0;
			while(_g < 3) {
				var i = _g++;
				var _g1 = 0;
				while(_g1 < 3) if(this.craftGrid[i][_g1++] == 1) {
					++co;
				}
			}
			if(this.woods == 0 && co == 0) {
				this.mode = 1;
			} else {
				var _g2 = 0;
				while(_g2 < 3) {
					var i1 = _g2++;
					var _g11 = 0;
					while(_g11 < 3) {
						var j = _g11++;
						if(this.craftGrid[i1][j] == 0 && this.woods > 0) {
							if(this.aabb(mx,my,24 + j * 16,56 + i1 * 16,16,16)) {
								this.craftGrid[i1][j] = 1;
								this.woods--;
							}
						}
					}
				}
				if(this.aabb(mx,my,104,72,16,16)) {
					if(this.craftGrid[0][0] == 0 && this.craftGrid[0][1] == 1 && this.craftGrid[0][2] == 0 && this.craftGrid[1][0] == 1 && this.craftGrid[1][1] == 1 && this.craftGrid[1][2] == 1 && this.craftGrid[2][0] == 0 && this.craftGrid[2][1] == 1 && this.craftGrid[2][2] == 0) {
						this.cros++;
					} else {
						this.garb++;
					}
					this.craftGrid = [[0,0,0],[0,0,0],[0,0,0]];
				}
			}
		}
	}
	,aabb: function(x,y,x1,y1,w,h) {
		if(x > x1 && x < x1 + w && y > y1) {
			return y < y1 + h;
		} else {
			return false;
		}
	}
	,dist: function(x1,y1,x2,y2) {
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}
	,distE: function(e1,e2) {
		return this.dist(e1.x,e1.y,e2.x,e2.y);
	}
	,gotoMain: function() {
		this.mainCount = 0;
		this.mode = 1;
	}
	,draw: function() {
		var _this = this.g;
		var tmp = _this.g2d.fillStyle;
		_this.g2d.fillStyle = "rgb(" + (0.5 | 0) + "," + (0.5 | 0) + "," + (0.5 | 0) + ")";
		_this.g2d.fillRect(0,0,_this.g2d.canvas.width,_this.g2d.canvas.height);
		_this.g2d.fillStyle = tmp;
		switch(this.mode) {
		case 0:
			this.w.draw(this.g);
			var imgy = -32 + (this.titleCount >> 1);
			if(imgy > 24) {
				imgy = 24;
			}
			this.g.image(this.titleImg,0,0,128,32,0,imgy,128,32);
			break;
		case 1:
			this.w.draw(this.g);
			break;
		case 2:
			this.g.image(this.craftImg,0,0,128,128,0,0,128,128);
			var co = 0;
			var _g = 0;
			while(_g < 3) {
				var i = _g++;
				var _g1 = 0;
				while(_g1 < 3) {
					var j = _g1++;
					if(this.craftGrid[i][j] == 1) {
						++co;
						this.g.image(this.craftWImg,0,0,16,16,24 + j * 16,56 + i * 16,16,16);
					}
				}
			}
			if(this.craftGrid[0][0] == 0 && this.craftGrid[0][1] == 1 && this.craftGrid[0][2] == 0 && this.craftGrid[1][0] == 1 && this.craftGrid[1][1] == 1 && this.craftGrid[1][2] == 1 && this.craftGrid[2][0] == 0 && this.craftGrid[2][1] == 1 && this.craftGrid[2][2] == 0) {
				this.g.image(this.craftWImg,16,0,16,16,104,72,16,16);
			} else if(co > 0) {
				this.g.image(this.craftWImg,32,0,16,16,104,72,16,16);
			}
			if(this.woods > 0) {
				this.g.image(this.craftWImg,0,0,16,16,this.input.touchX + this.input.mouseX - 8,this.input.touchY + this.input.mouseY - 8,16,16);
			}
			break;
		case 3:
			this.g.image(this.gameoverImg,0,0,128,32,0,32,128,32);
			break;
		}
	}
	,__class__: GameJam1702_$2
});
var Item = function(x,y,tileX,tileY) {
	Entity.call(this,x,y);
	this.vx = Math.random() * 0.3 - 0.15;
	this.vy = Math.random() * 0.3 - 0.15;
	this.tileX = tileX;
	this.tileY = tileY;
	this.count = Math.random() * 5 | 0;
};
Item.__name__ = true;
Item.__super__ = Entity;
Item.prototype = $extend(Entity.prototype,{
	update: function() {
		this.vx *= 0.9;
		this.vy *= 0.9;
		this.x += this.vx;
		this.y += this.vy;
		this.count++;
		if(GameJam1702_$2.o.distE(this,GameJam1702_$2.o.pl) < 0.8 && this.count > 50) {
			this.onGet();
		}
	}
	,onGet: function() {
	}
	,draw: function(g) {
		if(this.count < 50 && (this.count >> 1) % 2 == 0) {
			return;
		}
		g.image(GameJam1702_$2.o.tileImg,this.tileX * 8,this.tileY * 8 + (GameJam1702_$2.o.night?16:0),8,8,Math.round(this.x * 8) - 4,Math.round(this.y * 8) - 4,8,8);
	}
	,__class__: Item
});
var ItemWood = function(x,y) {
	Item.call(this,x,y,1,1);
};
ItemWood.__name__ = true;
ItemWood.__super__ = Item;
ItemWood.prototype = $extend(Item.prototype,{
	onGet: function() {
		this.remove = true;
		GameJam1702_$2.o.woods++;
	}
	,__class__: ItemWood
});
Math.__name__ = true;
var Player = function(x,y) {
	Entity.call(this,x,y);
	this.dir = 0;
	this.walkCount = 0;
};
Player.__name__ = true;
Player.__super__ = Entity;
Player.prototype = $extend(Entity.prototype,{
	update: function() {
	}
	,draw: function(g) {
		g.image(GameJam1702_$2.o.plImg,(this.walkCount >> 1) % 4 * 8,this.dir * 8,8,8,Math.round(this.x * 8) - 4,Math.round(this.y * 8) - 4,8,8);
	}
	,__class__: Player
});
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Wood = function(x,y) {
	Entity.call(this,x + 0.5,y + 0.5);
	this.damageCount = 0;
	this.hp = 5;
};
Wood.__name__ = true;
Wood.__super__ = Entity;
Wood.prototype = $extend(Entity.prototype,{
	update: function() {
		if(this.damageCount > 0) {
			this.damageCount--;
		}
	}
	,hit: function() {
		this.damageCount = 10;
		this.hp--;
		if(this.hp == 0) {
			this.remove = true;
			var _g = 0;
			while(_g < 3) {
				++_g;
				GameJam1702_$2.o.w.addEntity(new ItemWood(this.x,this.y));
			}
		}
	}
	,draw: function(g) {
		var img = GameJam1702_$2.o.tileImg;
		var ix = Math.round(this.x * 8 + (this.damageCount > 0?Math.random() * 2 - 1:0));
		var iy = this.y * 8;
		var iy1 = this.damageCount > 0?Math.random() * 2 - 1:0;
		g.image(img,0,8 + (GameJam1702_$2.o.night?16:0),8,8,ix - 4,Math.round(iy + iy1) - 4,8,8);
	}
	,__class__: Wood
});
var World = function(w,h) {
	this.w = w;
	this.h = h;
	this.data = [];
	this.es = [];
	this.count = 0;
	var _g1 = 0;
	while(_g1 < h) {
		var i = _g1++;
		this.data.push([]);
		var _g3 = 0;
		while(_g3 < w) {
			var j = _g3++;
			this.data[i][j] = i == 0 || j == 0 || i == w - 1 || j == h - 1?2:0;
		}
	}
	this.data[w >> 1][h >> 1] = 3;
	var _g11 = 0;
	while(_g11 < h) {
		var i1 = _g11++;
		var _g31 = 0;
		while(_g31 < w) {
			var j1 = _g31++;
			if(this.data[i1][j1] == 0 && Math.random() < 0.1) {
				this.addEntity(new Wood(i1,j1));
			}
		}
	}
};
World.__name__ = true;
World.prototype = {
	update: function() {
		var _g = 0;
		var _g1 = this.es;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.update();
		}
		this.es = this.es.filter(function(e1) {
			return !e1.remove;
		});
		this.count++;
		if(!GameJam1702_$2.o.night && this.count % 500 == 0) {
			var _g11 = 0;
			var _g2 = this.h;
			while(_g11 < _g2) {
				var i = _g11++;
				var _g3 = 0;
				var _g21 = this.w;
				while(_g3 < _g21) {
					var j = _g3++;
					if(this.data[i][j] == 0 && Math.random() < 0.01) {
						this.addEntity(new Wood(i,j));
					}
					if(this.data[i][j] == 1 && Math.random() < 0.1) {
						this.data[i][j] = 0;
					}
				}
			}
		}
		if(GameJam1702_$2.o.night && this.count % 20 == 0) {
			var _g12 = 0;
			var _g4 = this.h;
			while(_g12 < _g4) {
				var i1 = _g12++;
				var _g31 = 0;
				var _g22 = this.w;
				while(_g31 < _g22) {
					var j1 = _g31++;
					if(this.data[i1][j1] == 0 && Math.random() < 0.005) {
						this.addEntity(new Zombie(i1,j1));
					}
				}
			}
		}
	}
	,draw: function(g) {
		var img = GameJam1702_$2.o.tileImg;
		var _g1 = 0;
		var _g = this.h;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.w;
			while(_g3 < _g2) {
				var j = _g3++;
				g.image(img,this.data[i][j] * 8,GameJam1702_$2.o.night?16:0,8,8,j * 8,i * 8,8,8);
			}
		}
		var _g4 = 0;
		var _g11 = this.es;
		while(_g4 < _g11.length) {
			var e = _g11[_g4];
			++_g4;
			e.draw(g);
		}
	}
	,addEntity: function(e) {
		this.es.push(e);
	}
	,getBlockAt: function(x,y) {
		var gx = x | 0;
		var gy = y | 0;
		if(gx >= 0 && gx < this.w && gy >= 0 && gy < this.h) {
			return this.data[gy][gx];
		}
		return -1;
	}
	,__class__: World
};
var Zombie = function(x,y) {
	Entity.call(this,x,y);
	this.dir = 0;
	this.walkCount = Math.random() * 5 | 0;
};
Zombie.__name__ = true;
Zombie.__super__ = Entity;
Zombie.prototype = $extend(Entity.prototype,{
	update: function() {
		var pl = GameJam1702_$2.o.pl;
		var dx = pl.x - this.x;
		var dy = pl.y - this.y;
		var l = 1 / Math.sqrt(dx * dx + dy * dy + 1e-6);
		this.x += dx * l * 0.05;
		this.y += dy * l * 0.05;
		this.dir = Math.abs(dx) > Math.abs(dy)?1:0;
		this.walkCount++;
	}
	,draw: function(g) {
		g.image(GameJam1702_$2.o.plImg,(this.walkCount >> 1) % 4 * 8,16 + this.dir * 8,8,8,Math.round(this.x * 8) - 4,Math.round(this.y * 8) - 4,8,8);
	}
	,__class__: Zombie
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class?o.__name__ != null:false) {
			return true;
		}
		if(cl == Enum?o.__ename__ != null:false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var oimo_js_engine_OBlendMode = { __ename__ : true, __constructs__ : ["Blend","Add","Multiply","Screen"] };
oimo_js_engine_OBlendMode.Blend = ["Blend",0];
oimo_js_engine_OBlendMode.Blend.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Add = ["Add",1];
oimo_js_engine_OBlendMode.Add.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Multiply = ["Multiply",2];
oimo_js_engine_OBlendMode.Multiply.__enum__ = oimo_js_engine_OBlendMode;
oimo_js_engine_OBlendMode.Screen = ["Screen",3];
oimo_js_engine_OBlendMode.Screen.__enum__ = oimo_js_engine_OBlendMode;
var oimo_js_engine_OGraphicsMode = { __ename__ : true, __constructs__ : ["WebGL","Canvas2D"] };
oimo_js_engine_OGraphicsMode.WebGL = ["WebGL",0];
oimo_js_engine_OGraphicsMode.WebGL.__enum__ = oimo_js_engine_OGraphicsMode;
oimo_js_engine_OGraphicsMode.Canvas2D = ["Canvas2D",1];
oimo_js_engine_OGraphicsMode.Canvas2D.__enum__ = oimo_js_engine_OGraphicsMode;
var oimo_js_engine_OImageLoader = function() {
	this.images = [];
};
oimo_js_engine_OImageLoader.__name__ = true;
oimo_js_engine_OImageLoader.prototype = {
	add: function(image) {
		this.images.push(image);
	}
	,waitForAll: function(onFinished) {
		var waitingCount = this.images.length;
		if(waitingCount == 0) {
			onFinished();
			return;
		}
		var _g = 0;
		var _g1 = this.images;
		while(_g < _g1.length) {
			var image = _g1[_g];
			++_g;
			image.onload = function() {
				if((waitingCount -= 1) == 0) {
					onFinished();
				}
			};
		}
	}
	,__class__: oimo_js_engine_OImageLoader
};
var oimo_js_engine_OInput = function() {
	this.ptouchX = 0;
	this.ptouchY = 0;
	this.touchX = 0;
	this.touchY = 0;
	this.dtouchX = 0;
	this.dtouchY = 0;
	this._ntouchX = 0;
	this._ntouchY = 0;
	this.ptouch = false;
	this.touch = false;
	this._ntouch = false;
	this.dtouch = 0;
	this.pmouseX = 0;
	this.pmouseY = 0;
	this.mouseX = 0;
	this.mouseY = 0;
	this.dmouseX = 0;
	this.dmouseY = 0;
	this._nmouseX = 0;
	this._nmouseY = 0;
	this.pmouseL = false;
	this.pmouseR = false;
	this.mouseL = false;
	this.mouseR = false;
	this.dmouseL = 0;
	this.dmouseR = 0;
	this._nmouseL = false;
	this._nmouseR = false;
};
oimo_js_engine_OInput.__name__ = true;
oimo_js_engine_OInput.prototype = {
	_update: function() {
		this.ptouchX = this.touchX;
		this.ptouchY = this.touchY;
		this.touchX = this._ntouchX;
		this.touchY = this._ntouchY;
		this.dtouchX = this.touchX - this.ptouchX;
		this.dtouchY = this.touchY - this.ptouchY;
		this.ptouch = this.touch;
		this.touch = this._ntouch;
		this.dtouch = (this.touch?1:0) - (this.ptouch?1:0);
		if(this.dtouch == 1) {
			this.ptouchX = this.touchX;
			this.ptouchY = this.touchY;
		}
		this.pmouseX = this.mouseX;
		this.pmouseY = this.mouseY;
		this.mouseX = this._nmouseX;
		this.mouseY = this._nmouseY;
		this.dmouseX = this.mouseX - this.pmouseX;
		this.dmouseY = this.mouseY - this.pmouseY;
		this.pmouseL = this.mouseL;
		this.pmouseR = this.mouseR;
		this.mouseL = this._nmouseL;
		this.mouseR = this._nmouseR;
		this.dmouseL = (this.mouseL?1:0) - (this.pmouseL?1:0);
		this.dmouseR = (this.mouseR?1:0) - (this.pmouseR?1:0);
	}
	,__class__: oimo_js_engine_OInput
};
var oimo_js_engine_OTimer = function(targetFPS,targetFunction) {
	this.targetFPS = targetFPS;
	this.targetFunction = targetFunction;
	this.running = false;
};
oimo_js_engine_OTimer.__name__ = true;
oimo_js_engine_OTimer.prototype = {
	run: function() {
		this.running = true;
		this.expectedNextTime = new Date().getTime();
		this.loop();
	}
	,stop: function() {
		this.running = false;
	}
	,loop: function() {
		this.targetFunction();
		var en = new Date().getTime();
		var sleep = this.expectedNextTime + 1000.0 / this.targetFPS - en;
		if(sleep < 5) {
			sleep = 5;
		}
		this.expectedNextTime = en + sleep;
		if(this.running) {
			window.setTimeout($bind(this,this.loop),sleep + 0.5 | 0);
		}
	}
	,time: function() {
		return new Date().getTime();
	}
	,__class__: oimo_js_engine_OTimer
};
var oimo_js_graphics_OGraphics2D = function(canvasRenderingContext2D) {
	this.g2d = canvasRenderingContext2D;
};
oimo_js_graphics_OGraphics2D.__name__ = true;
oimo_js_graphics_OGraphics2D.prototype = {
	background: function(r,g,b) {
		var tmp = this.g2d.fillStyle;
		this.g2d.fillStyle = "rgb(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + ")";
		this.g2d.fillRect(0,0,this.g2d.canvas.width,this.g2d.canvas.height);
		this.g2d.fillStyle = tmp;
	}
	,fill: function(r,g,b,a) {
		if(a == null) {
			a = 1.0;
		}
		this.g2d.fillStyle = "rgba(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + "," + a + ")";
		this.fillEnabled = true;
	}
	,noFill: function() {
		this.fillEnabled = false;
	}
	,stroke: function(r,g,b,a) {
		if(a == null) {
			a = 1.0;
		}
		this.g2d.strokeStyle = "rgba(" + (255 * r + 0.5 | 0) + "," + (255 * g + 0.5 | 0) + "," + (255 * b + 0.5 | 0) + "," + a + ")";
		this.strokeEnabled = true;
	}
	,noStroke: function() {
		this.strokeEnabled = false;
	}
	,strokeWeight: function(strokeWeight) {
		this.g2d.lineWidth = strokeWeight;
	}
	,rect: function(x,y,w,h) {
		if(this.fillEnabled) {
			this.g2d.fillRect(x,y,w,h);
		}
		if(this.strokeEnabled) {
			this.g2d.strokeRect(x,y,w,h);
		}
	}
	,circle: function(x,y,r) {
		this.g2d.beginPath();
		this.g2d.arc(x,y,r,0,Math.PI * 2,false);
		if(this.fillEnabled) {
			this.g2d.fill();
		}
		if(this.strokeEnabled) {
			this.g2d.stroke();
		}
	}
	,line: function(x1,y1,x2,y2) {
		this.g2d.beginPath();
		this.g2d.moveTo(x1,y1);
		this.g2d.lineTo(x2,y2);
		this.g2d.stroke();
	}
	,blendMode: function(mode) {
		switch(mode[1]) {
		case 0:
			this.g2d.globalCompositeOperation = "source-over";
			break;
		case 1:
			this.g2d.globalCompositeOperation = "lighter";
			break;
		case 2:
			this.g2d.globalCompositeOperation = "multiply";
			break;
		case 3:
			this.g2d.globalCompositeOperation = "screen";
			break;
		}
	}
	,push: function() {
		this.g2d.save();
	}
	,pop: function() {
		this.g2d.restore();
	}
	,scale: function(x,y) {
		this.g2d.scale(x,y);
	}
	,translate: function(x,y) {
		this.g2d.translate(x,y);
	}
	,image: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.g2d["imageSmoothingEnabled"] = false;
		this.g2d["msImageSmoothingEnabled"] = false;
		this.g2d.drawImage(img.canvas,sx,sy,sw,sh,dx,dy,dw,dh);
	}
	,imageSmooth: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.g2d["imageSmoothingEnabled"] = true;
		this.g2d["msImageSmoothingEnabled"] = true;
		this.g2d.drawImage(img.canvas,sx,sy,sw,sh,dx,dy,dw,dh);
	}
	,__class__: oimo_js_graphics_OGraphics2D
};
var oimo_js_graphics_OImage = function(width,height,graphicsMode) {
	this.width = width;
	this.height = height;
	this.pixels = new Array(width * height);
	this.canvas = window.document.createElement("canvas");
	this.canvas.width = width;
	this.canvas.height = height;
	switch(graphicsMode[1]) {
	case 0:
		this.c2d = null;
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
		break;
	case 1:
		this.c2d = this.canvas.getContext("2d",null);
		this.gl = null;
		break;
	}
};
oimo_js_graphics_OImage.__name__ = true;
oimo_js_graphics_OImage.prototype = {
	getPixels: function() {
		this.imageData = this.c2d.getImageData(0,0,this.width,this.height);
		var num = this.width * this.height;
		var index = 0;
		var _g1 = 0;
		while(_g1 < num) {
			this.pixels[_g1++] = this.imageData.data[index + 3] << 24 | this.imageData.data[index] << 16 | this.imageData.data[index + 1] << 8 | this.imageData.data[index + 2];
			index += 4;
		}
	}
	,setPixels: function() {
		var num = this.width * this.height;
		var index = 0;
		var _g1 = 0;
		while(_g1 < num) {
			var i = _g1++;
			var a = this.pixels[i] >>> 24;
			var g = this.pixels[i] >>> 8 & 255;
			var b = this.pixels[i] & 255;
			this.imageData.data[index] = this.pixels[i] >>> 16 & 255;
			this.imageData.data[index + 1] = g;
			this.imageData.data[index + 2] = b;
			this.imageData.data[index + 3] = a;
			index += 4;
		}
		this.c2d.putImageData(this.imageData,0,0);
	}
	,__class__: oimo_js_graphics_OImage
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
js_Boot.__toStr = ({ }).toString;
GameJam1702_$2.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
